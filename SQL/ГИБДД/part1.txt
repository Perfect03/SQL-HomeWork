
   
------------------------------------------
/*1. Написать команды создания таблиц заданной схемы с
указанием необходимых ключей и ограничений. Все
ограничения должны быть именованными (для первичных
ключей имена должны начинаться с префикса «PK_», для
вторичного ключа – «FK_», проверки - «CH_»).
Ограничения: сумма страхового полиса не может быть
отрицательной: объём двигателя не может быть отрицательным
или больше 10000 литров; значение поля сумма не может быть
отрицательным; значение null допустимо только в поле
дата_окончания. 
*/

CREATE TABLE "Владельцы"
(
"Номер лицензии" integer NOT NULL,
"ФИО" varchar(100) NOT NULL,
"Адрес" varchar(100) NOT NULL,
"Телефон" varchar(100) NOT NULL,
CONSTRAINT pk_Владельцы primary key ("Номер лицензии")
);

CREATE TABLE "Страховые компании"
(
"ID компании" integer NOT NULL,
"Название" varchar(100) NOT NULL,
"Адрес" varchar(100) NOT NULL,
"Телефон" varchar(100) NOT NULL,
CONSTRAINT pk_Страховые_компании primary key ("ID компании")
);

CREATE TABLE "Автомобили"
(
"Регистрационный номер" integer NOT NULL,
"Номер лицензии" integer NOT NULL,
"Марка" varchar(100) NOT NULL,
"Цвет" varchar(100) NOT NULL,
"Объем двигателя" numeric NOT NULL,
"Дата тех. обслуживания" DATE NOT NULL,
"Округ регистрации" varchar(100) NOT NULL,
CONSTRAINT pk_Автомобили primary key ("Регистрационный номер"),
CONSTRAINT fk_Автомобили_Владельцы foreign key ("Номер лицензии") references Владельцы ("Номер лицензии"),
CONSTRAINT ch_Автомобили check ("Объем двигателя" >=0 AND "Объем двигателя" <=10000)
);

CREATE TABLE "Страховые полисы"
(
"Номер полиса" integer NOT NULL,
"ID компании" integer NOT NULL,
"Регистрационный номер" integer NOT NULL,
"Дата начала" DATE NOT NULL,
"Дата окончания" DATE,
"Тип страхования" varchar(100) NOT NULL,
"Сумма" numeric NOT NULL,
CONSTRAINT pk_Страховые_полисы primary key ("Номер полиса"),
CONSTRAINT fk_Страховые_полисы_Страховые_комп foreign key ("ID компании") references "Страховые компании" ("ID компании"),
CONSTRAINT fk_Страховые_полисы_Автомобили foreign key ("Регистрационный номер") references "Автомобили" ("Регистрационный номер"),
CONSTRAINT ch_Страховые_полисы check ("Сумма" >=0),
CONSTRAINT ch_Страховые_полисы__ check ("Дата начала" < "Дата окончания")
);

----------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 2. Заполнить созданные таблицы данными, 5-10 записей для каждой таблицы.

INSERT INTO "Владельцы"("Номер лицензии", "ФИО", "Адрес", "Телефон") VALUES (1, 'Александров Олег Миронович', 'г.Томск, ул. Карла-Маркса 15', '82971385355'),
(2, 'Евсеева Кира Никитична', 'г.Томск, ул. Киплинга 1, кв. 22', '8900509592'),
(3, 'Морозова Ольга Александровна', 'г.Москва, ул. Евгения 55', '81876811108'),
(4, 'Фомин Богдан Георгиевич', 'г.Севастополь, ул. Шишкина 99, кв. 74', '8117553843'),
(5, 'Трофимова Аделя Александровна', 'г.Воронеж, ул. Калинина 12, кв. 11', '85944369557'),
(6, 'Титова Алия Андреевна', 'г.Иваново, ул. Парковая 35, кв. 57', '815929081278'),
(7, 'Демидов Роман Владиславович', 'г.Киров, ул. Гариповой 12, кв. 58', '831770244798'),
(8, 'Виноградов Матвей Даниэльевич', 'г.Казань, ул. Промышленная 66', '89492121491'),
(9, 'Сахаров Захар Фёдорович', 'г.Томск, ул. Нахимова 34, кв. 33', '87271582268'),
(10, 'Евсеева Кира Никитична', 'г.Новосибирск, ул. Пушкина 55, кв. 12', '89281710216');

INSERT INTO "Страховые компании"("ID компании", "Название", "Адрес", "Телефон") VALUES (1, 'МАКС', 'г.Москва, ул. Пушкина 99', '83759275596'),
(2, 'БЖЗК', 'г.Калининград, ул. Промышленная 8', '81859386600'),
(3, 'Салют', 'г.Санкт-Петербург, ул. Победы 95', '88286749377'),
(4, 'ВТБ', 'г.Рубцовск, ул. Кирова 234', '82586037293'),
(5, 'Тинькофф', 'г.Свердловск, ул. Карла-Маркса 55', '82859374067'),
(6, 'СБЕР', 'г.Екатеринбург, ул. Калинина 22', '82184584939');

INSERT INTO "Автомобили"("Регистрационный номер", "Номер лицензии", "Марка", "Цвет", "Объем двигателя", "Дата тех. обслуживания", "Округ регистрации") VALUES (1, 1, 'Ford', 'черный', 2.0, to_date('2010-02-02', 'YYYY-MM-DD'), 'Томская область'),
(2, 2, 'Ford', 'белый', 3.0, to_date('2006-06-09', 'YYYY-MM-DD'), 'Томская область'),
(3, 3, 'Ford', 'серебристый', 2.6, to_date('2000-05-01', 'YYYY-MM-DD'), 'Московская область'),
(4, 4, 'Mazda', 'серебристый', 1.5, to_date('2019-11-29', 'YYYY-MM-DD'), 'Амурская область'),
(5, 5, 'Jeep', 'зеленый', 2.5, to_date('2011-01-24', 'YYYY-MM-DD'), 'Воронежская область'),
(6, 6, 'Honda', 'коричневый', 3.5, to_date('2003-03-31', 'YYYY-MM-DD'), 'Ивановская Алтай'),
(7, 7, 'BMW', 'красный', 1.8, to_date('2002-12-05', 'YYYY-MM-DD'), 'Кировская область'),
(8, 8, 'Renault', 'желтый', 2.0, to_date('2014-05-06', 'YYYY-MM-DD'), 'Республика Коми'),
(9, 9, 'Mitsubishi', 'фиолетовый', 4.4, to_date('2000-12-30', 'YYYY-MM-DD'), 'Томская область'),
(10, 10, 'Infiniti', 'белый', 3.4, to_date('2008-08-30', 'YYYY-MM-DD'), 'Новосибирская область');

INSERT INTO "Страховые полисы"("Номер полиса", "ID компании", "Регистрационный номер", "Дата начала", "Дата окончания", "Тип страхования", "Сумма") VALUES (1, 1, 1, to_date('2013-12-11', 'YYYY-MM-DD'), to_date('2023-12-11', 'YYYY-MM-DD'), 'КАСКО Lite', 10000),
(2, 1, 2, to_date('2002-02-22', 'YYYY-MM-DD'), to_date('2022-02-22', 'YYYY-MM-DD'), 'КАСКО', 20000),
(3, 2, 2, to_date('2018-05-13', 'YYYY-MM-DD'), to_date('2023-05-23', 'YYYY-MM-DD'), 'КАСКО Lite', 30000),
(4, 2, 3, to_date('2015-05-01', 'YYYY-MM-DD'), to_date('2025-05-01', 'YYYY-MM-DD'), 'ОСАГО', 40000),
(5, 3, 4, to_date('2012-07-16', 'YYYY-MM-DD'), NULL, 'Техассистанс', 50000),
(6, 3, 5, to_date('2011-02-10', 'YYYY-MM-DD'), to_date('2026-11-01', 'YYYY-MM-DD'), 'Техассистанс', 45000),
(7, 4, 6, to_date('2020-10-31', 'YYYY-MM-DD'), to_date('2025-10-31', 'YYYY-MM-DD'), 'ОСАГО', 35000),
(8, 5, 7, to_date('2000-04-04', 'YYYY-MM-DD'), to_date('2020-04-04', 'YYYY-MM-DD'), 'КАСКО Lite', 25000),
(9, 5, 8, to_date('2009-09-09', 'YYYY-MM-DD'), NULL, 'КАСКО', 15000),
(10, 5, 9, to_date('2012-12-23', 'YYYY-MM-DD'), to_date('2022-12-23', 'YYYY-MM-DD'), 'КАСКО', 5000);

------------------------------------------
-- 3. Написать запросы. Устранить дублирование только для тех случаев, где это потенциально возможно.

/*
3.1. Вывести номер лицензии и автомобилей марки “Ford” с
объёмом двигателя больше 2.5 литра. Результат упорядочить
по объёму двигателя
*/

SELECT "Номер лицензии" FROM "Автомобили"
WHERE "Объем двигателя" > 2.5 AND LOWER("Марка") = 'ford'
ORDER BY "Объем двигателя";

/*3.2. Вывести владельцев автомобилей застраховавшихся летом.
В выборке должны присутствовать только следующие поля:
ФИО автовладельца, марку машины, название страховой
компании и сумму. Результат упорядочить по ФИО */

SELECT "ФИО", "Марка", "Название" AS "Страховая компания", "Сумма" AS "Сумма страхования"
FROM "Автомобили" JOIN "Владельцы" ON "Владельцы"."Номер лицензии" = "Автомобили"."Номер лицензии"
    JOIN "Страховые полисы" ON "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер"
    JOIN "Страховые компании" ON "Страховые компании"."ID компании" = "Страховые полисы"."ID компании"
	WHERE EXTRACT (month FROM "Дата начала") IN (6,7,8)
	ORDER BY "ФИО";


/*
3.3. Сформировать статистику по маркам машин. В выборке
должны присутствовать следующие поля: марка машины,
число машин, средняя цена страхового полюса, средний срок
страхования для страховок ограниченного срока действия.
*/

SELECT "Марка", count(DISTINCT "Автомобили"."Регистрационный номер") AS "Число машин", AVG("Сумма")::integer AS "Средняя сумма страхования", AVG(AGE("Дата окончания", "Дата начала")) AS "Средний срок страхования" FROM "Автомобили"
LEFT JOIN "Страховые полисы" ON "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер"
GROUP BY "Марка";

/*
3.4. Сформировать список страховых компаний, 
у которых количество действующих срочных страховок (страховок ограниченного срока действия)
превышает количество бессрочных страховок.
*/

WITH t1 AS(SELECT "Название", CASE 
	WHEN "Дата окончания" IS NULL THEN 0
	WHEN (CURRENT_DATE - "Дата окончания" <0) THEN 1
	ELSE NULL END AS "term"
	FROM "Страховые полисы"
JOIN "Страховые компании" ON "Страховые компании"."ID компании" = "Страховые полисы"."ID компании")
SELECT "Название" FROM t1
GROUP BY "Название"
HAVING (count(term)<(2*sum(term)));

-- 3.5. Выбрать страховые полисы, у которых сумма страховке выше средней.

WITH t1 AS(
SELECT AVG("Сумма") AS average FROM "Страховые полисы")
SELECT "Номер полиса", "Сумма" AS "Сумма страхования" FROM t1
CROSS JOIN "Страховые полисы"
WHERE "Сумма">=average;

-- 3.6. Найти автомобили, на данный момент нигде не застрахованные.

SELECT * FROM "Автомобили" WHERE NOT EXISTS
(
   SELECT FROM "Страховые полисы"
   WHERE "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер"
) 
OR EXISTS
(
   SELECT FROM "Страховые полисы"
   WHERE "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер"
      AND "Дата окончания" <= CURRENT_DATE
)

------------------------------------------
-- 4. Написать запросы на изменение данных.
-- 4.1. Увеличить страховую сумму в 1,5 раза для автомобилей с объемом двигателя более 2,5 литра

SELECT "Автомобили"."Регистрационный номер", "Объем двигателя", "Сумма" 
FROM "Автомобили"
JOIN "Страховые полисы" ON "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер";

UPDATE "Страховые полисы" SET "Сумма"="Сумма" * 1.5
WHERE EXISTS
(
SELECT FROM "Автомобили"
WHERE ("Автомобили"."Регистрационный номер" = "Страховые полисы"."Регистрационный номер") AND "Объем двигателя" > 2.5);

SELECT "Автомобили"."Регистрационный номер", "Объем двигателя", "Сумма" 
FROM "Автомобили"
JOIN "Страховые полисы" ON "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер";

-- 4.2. Удалить сведения о страховых компаниях, не прописавших ни одного страхового полюса.

--SELECT * FROM "Страховые компании";

DELETE FROM "Страховые компании"
WHERE NOT EXISTS (
    SELECT FROM "Страховые полисы"
    WHERE "Страховые компании"."ID компании" = "Страховые полисы"."ID компании"
);

SELECT * FROM "Страховые компании";

------------------------------------------
-- 5. Создать представления.
-- 5.1. Оформить запросы 3.5-3.6 в виде представления.

CREATE VIEW view1 AS
WITH t1 AS(
SELECT AVG("Сумма") AS avg FROM "Страховые полисы")
SELECT "Номер полиса", "Сумма" AS "Сумма страхования" FROM t1
CROSS JOIN "Страховые полисы"
WHERE "Сумма">=avg;

SELECT * FROM view1;

CREATE VIEW view2 AS
SELECT * FROM "Автомобили" WHERE NOT EXISTS
(
   SELECT FROM "Страховые полисы"
   WHERE "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер"
) 
OR EXISTS
(
   SELECT FROM "Страховые полисы"
   WHERE "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер"
      AND "Дата окончания" <= CURRENT_DATE
);

SELECT * FROM view2;

/*
5.2. Создать представление со следующими полями: Номер лицензии, ФИО, телефон, марка машины, число дней с момента тех. осмотра, номер
действующего полюса, тип и сумма страховки. 
*/

CREATE VIEW view3 AS
SELECT "Автомобили"."Номер лицензии", "ФИО", "Марка", CURRENT_DATE - "Дата тех. обслуживания" AS "Количество дней с момента тех.осм.", "Номер полиса", "Тип страхования", Сумма AS "Сумма страхования" FROM "Автомобили"
JOIN "Страховые полисы" ON "Страховые полисы"."Регистрационный номер" = "Автомобили"."Регистрационный номер"
JOIN "Владельцы" ON "Владельцы"."Номер лицензии" = "Автомобили"."Номер лицензии";

SELECT * FROM view3;

---------------------------------------
---------------------------------------
---------------------------------------

DROP VIEW view1;
DROP VIEW view2;
DROP VIEW view3;
DROP TABLE "Страховые полисы";
DROP TABLE "Страховые компании";
DROP TABLE Автомобили;
DROP TABLE Владельцы;