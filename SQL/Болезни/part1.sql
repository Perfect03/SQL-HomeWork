-- Вариант 2

------------------------------------------
-- 1. Создание схемы БД.
-- Ограничения: продолжительность болезни не может быть менее 1 для и более 3 месяцев; 
--              оклад и надбавка не могут быть отрицательными; 
--              значение null допустимо только в полях адрес и продолжительность болезни


-- Болезни

CREATE TABLE DESEASES
(
    DESEASE_ID NUMBER(10,0), --ID_Болезни
    NAME  VARCHAR2(100), --Название
    CONSTRAINT  PK_DESEASE PRIMARY KEY (DESEASE_ID),
    CONSTRAINT CK_DESEASE_NOT_NULL CHECK (DESEASE_ID IS NOT NULL AND NAME IS NOT NULL)
);

-- Сотрудники
CREATE TABLE EMPLOYEES
(
    EMP_ID NUMBER(10,0), --ID_Сотрудника
    FULL_NAME  VARCHAR2(100),-- ФИО
    ADDRESS  VARCHAR2(100),  -- Адрес
    POST       VARCHAR2(100),-- Должность
    SALARY      NUMBER(10,0), --Оклад
    BIRTHDAY   DATE, -- Дата_рождения   
    CONSTRAINT  PK_EMPLOYEE PRIMARY KEY (EMP_ID),
    CONSTRAINT CK_SALARY CHECK (SALARY >= 0),
    CONSTRAINT CK_EMP_NOT_NULL CHECK (EMP_ID IS NOT NULL AND FULL_NAME IS NOT NULL AND POST IS NOT NULL AND SALARY IS NOT NULL AND BIRTHDAY IS NOT NULL)
);

-- Надбавки
CREATE TABLE ALLOWANCES
(
    ALLOW_ID NUMBER(10,0), --ID_Надбавки
    NAME  VARCHAR2(500),-- Название
    AMOUNT  NUMBER(10,0), -- Сумма  
    CONSTRAINT  PK_ALLOWANCE PRIMARY KEY (ALLOW_ID),
    CONSTRAINT CK_AMOUNT CHECK (AMOUNT >= 0),
    CONSTRAINT CK_ALL_NOT_NULL CHECK (ALLOW_ID IS NOT NULL AND NAME IS NOT NULL AND AMOUNT IS NOT NULL)
);

-- Больничные_Листы
CREATE TABLE SICK_LISTS
(
    LIST_ID NUMBER(10,0), --ID_Больничного_Листа
    START_DATE DATE, --Дата_начала
    INTERV INTERVAL DAY TO SECOND, --Продолжительность
    DESEASE_ID NUMBER(10, 0), --ID_болезни
    EMP_ID NUMBER(10, 0), --ID_сотрудника
    CONSTRAINT  PK_SICK_LISTS PRIMARY KEY (LIST_ID),
    CONSTRAINT FK_DESEASE FOREIGN KEY (DESEASE_ID) REFERENCES DESEASES(DESEASE_ID),
    CONSTRAINT FK_EMPLOYEES_SICK FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEES(EMP_ID),
    CONSTRAINT CK_INTERV CHECK (((START_DATE + INTERV) <= (START_DATE + INTERVAL '3' MONTH)) AND INTERV >= INTERVAL '1' DAY),
    CONSTRAINT CK_SICK_LIST_NOT_NULL CHECK (LIST_ID IS NOT NULL AND START_DATE IS NOT NULL AND DESEASE_ID IS NOT NULL AND EMP_ID IS NOT NULL)
);

-- Сотрудники_надбавки
CREATE TABLE EMP_ALLOWANCES
(
    ALLOW_ID NUMBER(10,0), --ID_Надбавки
    EMP_ID NUMBER(10,0), --ID_Сотрудника
    CONSTRAINT  PK_EMP_ALLOWANCE PRIMARY KEY (ALLOW_ID, EMP_ID),
    CONSTRAINT FK_ALLOW FOREIGN KEY (ALLOW_ID) REFERENCES ALLOWANCES(ALLOW_ID),
    CONSTRAINT FK_EMPLOYEES_EMP FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEES(EMP_ID),
    CONSTRAINT CK_EMP_ALLOWANCES_NOT_NULL CHECK (ALLOW_ID IS NOT NULL AND EMP_ID IS NOT NULL)

);

------------------------------------------
-- 2. Заполнить созданные таблицы данными, 5-10 записей для каждой таблицы.

INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(1, 'flu');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(2, 'pneumonia');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(3, 'cancer');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(4, 'COVID-19');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(5, 'chickenpox');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(6, 'cholecystitis');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(7, 'AIDS');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(8, 'hepatitis');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(9, 'dementia');
INSERT INTO DESEASES(DESEASE_ID, NAME) VALUES(10, 'stroke');

INSERT INTO EMPLOYEES(EMP_ID, FULL_NAME, ADDRESS,  POST, SALARY, BIRTHDAY) VALUES(1, 'Абашин Максим Викторович', 'г.Томск, ул. Говорова 20, кв 5', 'врач-невролог', 21030, TO_DATE('1997-10-09 00:00:00', 'YYYY-MM-DD hh24:mi:ss'));
INSERT INTO EMPLOYEES(EMP_ID, FULL_NAME, ADDRESS,  POST, SALARY, BIRTHDAY) VALUES(2, 'Васечко Алексей Андреевич', 'г.Северск, пер. Юрточный 17, кв 53', 'врач-невролог', 25006, TO_DATE('1996-05-19 00:00:00', 'YYYY-MM-DD hh24:mi:ss'));
INSERT INTO EMPLOYEES(EMP_ID, FULL_NAME, ADDRESS,  POST, SALARY, BIRTHDAY) VALUES(3, 'Дайтер Ирина Игоревна', 'г.Томск, ул. Яковлева 35а, кв 1', 'врач клинической лабораторной диагностики', 40410, TO_DATE('1990-03-01 00:00:00', 'YYYY-MM-DD hh24:mi:ss'));
INSERT INTO EMPLOYEES(EMP_ID, FULL_NAME, ADDRESS,  POST, SALARY, BIRTHDAY) VALUES(4, 'Иващенко Альбина Ириковна', 'г.Новосибирск, ул. Татарская 3, кв 8', 'врач функциональной диагностики', 18100, TO_DATE('1985-05-27 00:00:00', 'YYYY-MM-DD hh24:mi:ss'));
INSERT INTO EMPLOYEES(EMP_ID, FULL_NAME, ADDRESS,  POST, SALARY, BIRTHDAY) VALUES(5, 'Копелев Александр Михайлович', 'г.Томск, ул. Суворово 35, кв 72', 'врач-анестезиолог-реаниматолог', 35630, TO_DATE('1980-12-12 00:00:00', 'YYYY-MM-DD hh24:mi:ss'));

INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(1, 'за работу в вечернее время', 3035);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(2, 'за работу в выходные и праздничные дни', 4000);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(3, 'за сверхурочную работу', 1100);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(4, 'за совмещение профессий (должностей)', 1500);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(5, 'за высокую квалификацию', 2200);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(6, 'за выполнение обязанностей отсутствующего работника', 6000);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(7, 'рабочим в связи с отклонением от нормальных условий труда', 2670);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(8, 'за работу с меньшей численностью работников', 1300);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(9, 'за профессиональное мастерство (рабочим)', 1173);
INSERT INTO ALLOWANCES(ALLOW_ID, NAME, AMOUNT) VALUES(10, 'за разъездной характер работы', 1400);

INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(1, TO_DATE('2019-08-20 03:47:13', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('5 00:00:00'), 5, 1);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(2, TO_DATE('2010-09-22 12:13:10', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('6 04:30:15'), 7, 1);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(3, TO_DATE('2013-01-03 14:37:49', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('33 14:34:55'), 2, 1);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(4, TO_DATE('2017-04-22 18:59:00', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('76 17:22:03'), 3, 1);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(5, TO_DATE('2011-05-05 00:00:23', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('34 10:34:47'), 6, 1);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(6, TO_DATE('2018-11-17 10:27:54', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('47 13:45:23'), 4, 1);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(7, TO_DATE('2020-09-13 09:31:57', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('15 00:17:34'), 1, 2);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(8, TO_DATE('2020-10-17 07:18:24', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('24 00:00:00'), 6, 3);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(9, TO_DATE('2020-08-20 11:34:08', 'YYYY-MM-DD hh24:mi:ss'), NULL, 8, 4);
INSERT INTO SICK_LISTS(LIST_ID, START_DATE, INTERV, DESEASE_ID, EMP_ID) VALUES(10, TO_DATE('2020-11-25 04:09:01', 'YYYY-MM-DD hh24:mi:ss'), TO_DSINTERVAL('2 13:54:08'), 6, 5);


INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(1, 1);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(2, 1);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(3, 1);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(4, 5);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(9, 3);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(8, 4);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(7, 2);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(6, 5);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(5, 4);
INSERT INTO EMP_ALLOWANCES(ALLOW_ID, EMP_ID) VALUES(9, 5);


------------------------------------------
-- 3. Написать запросы. Устранить дублирование только для тех случаев, где это потенциально возможно.

-- 3.1. Вывести список сотрудников проживающих в Томске, оклад которых больше 35 000 рублей. 
--      Результат упорядочить по размеру оклада.

SELECT FULL_NAME
FROM EMPLOYEES
WHERE SALARY > 35000 AND LOWER(ADDRESS) LIKE '%томск%'
ORDER BY SALARY;

-- 3.2. Вывести список сотрудников получающих надбавку на сумму не меньше 15% оклада. 
--      В выборке должны присутствовать только следующие поля: ФИО сотрудника, должность, оклад. 
--      Результат упорядочить по ФИО.

SELECT DISTINCT EMPLOYEES.FULL_NAME, EMPLOYEES.POST, EMPLOYEES.SALARY
FROM EMPLOYEES
    INNER JOIN EMP_ALLOWANCES ON EMP_ALLOWANCES.EMP_ID = EMPLOYEES.EMP_ID
    INNER JOIN ALLOWANCES ON ALLOWANCES.ALLOW_ID = EMP_ALLOWANCES.ALLOW_ID
WHERE 0.15*EMPLOYEES.SALARY <= ALLOWANCES.AMOUNT
ORDER BY EMPLOYEES.FULL_NAME;

-- 3.3. Сформировать зарплатную ведомость, просуммировав оклад и все надбавки + 30% районный коэффициент, 
--      минус подоходный налог 13% и профсоюзный взнос 1%. 
--      В выборке должны присутствовать следующие поля: табельный номер, ФИО, зарплата без вычетов, зарплата с вычетами

SELECT EMPLOYEES.EMP_ID, EMPLOYEES.FULL_NAME, (EMPLOYEES.SALARY + SUM(ALLOWANCES.AMOUNT))*1.3 AS salary, (EMPLOYEES.SALARY + SUM(ALLOWANCES.AMOUNT))*1.11969 AS improved_salary
FROM EMPLOYEES
    INNER JOIN EMP_ALLOWANCES ON EMP_ALLOWANCES.EMP_ID = EMPLOYEES.EMP_ID
    INNER JOIN ALLOWANCES ON ALLOWANCES.ALLOW_ID = EMP_ALLOWANCES.ALLOW_ID
GROUP BY EMPLOYEES.EMP_ID, EMPLOYEES.FULL_NAME, EMPLOYEES.SALARY;

-- 3.4. Сформировать список сотрудников, у которых общая продолжительность болезней в текущем году превышает три месяца. 

SELECT EMPLOYEES.FULL_NAME
FROM EMPLOYEES
    INNER JOIN SICK_LISTS ON SICK_LISTS.EMP_ID = EMPLOYEES.EMP_ID
GROUP BY SICK_LISTS.EMP_ID, EMPLOYEES.FULL_NAME
HAVING SUM(MONTHS_BETWEEN(START_DATE + INTERV, START_DATE)) > 3;

-- 3.5. Вывести список сотрудников, у которых оклад меньше среднего по должности.

SELECT FULL_NAME
FROM (
    SELECT FULL_NAME, SALARY, AVG(SALARY) OVER (PARTITION BY POST) AS AVG_SALARY
    FROM EMPLOYEES
)
WHERE SALARY < AVG_SALARY;

-- 3.6. Вывести список болезни, которыми болели суммарно не более 2-х сотрудников. 

SELECT DESEASES.NAME
FROM SICK_LISTS
    INNER JOIN DESEASES ON DESEASES.DESEASE_ID = SICK_LISTS.DESEASE_ID
GROUP BY SICK_LISTS.DESEASE_ID, DESEASES.NAME
HAVING COUNT(DISTINCT EMP_ID) BETWEEN 1 AND 2;

------------------------------------------
-- 4. Написать запросы на изменение данных.

-- 4.1. Провести увеличение оклада на 10% всем сотрудникам, которые не болели в течение всего прошлого года

UPDATE EMPLOYEES
SET SALARY = SALARY*1.1
WHERE NOT EXISTS (
    SELECT 1
    FROM SICK_LISTS
    WHERE SICK_LISTS.EMP_ID = EMPLOYEES.EMP_ID AND
    (EXTRACT(YEAR FROM SYSDATE) - 1 IN (EXTRACT(YEAR FROM START_DATE), EXTRACT(YEAR FROM (START_DATE + INTERV))))
);

-- 4.2. Удалить не используемые надбавки.

DELETE FROM ALLOWANCES
WHERE NOT EXISTS (
    SELECT 1
    FROM EMP_ALLOWANCES
    WHERE EMP_ALLOWANCES.ALLOW_ID = ALLOWANCES.ALLOW_ID
);

------------------------------------------
-- 5. Создать представления.
-- 5.1. Оформить запросы 3.5 - 3.6 в виде представления.
CREATE VIEW LOOSERS AS
SELECT FULL_NAME
FROM (
    SELECT FULL_NAME, SALARY, AVG(SALARY) OVER (PARTITION BY POST) AS AVG_SALARY
    FROM EMPLOYEES
)
WHERE SALARY < AVG_SALARY;

CREATE VIEW RARE_DESEASES AS
SELECT DESEASES.NAME
FROM SICK_LISTS
    INNER JOIN DESEASES ON DESEASES.DESEASE_ID = SICK_LISTS.DESEASE_ID
GROUP BY SICK_LISTS.DESEASE_ID, DESEASES.NAME
HAVING COUNT(DISTINCT EMP_ID) <= 2;

-- 5.2. Создать представление со следующими полями: 
--      ID_сотрудника, номер больничного листа, дата начала болезни, название болезни, 
--      продолжительность в днях (если число не заполнено, то вывести число, прошедших с начала дней).

CREATE VIEW EMP_SICK AS
SELECT EMPLOYEES.EMP_ID, SICK_LISTS.DESEASE_ID, SICK_LISTS.START_DATE, DESEASES.NAME, 
CASE WHEN SICK_LISTS.INTERV IS NULL THEN TRUNC(SYSDATE - START_DATE) ELSE EXTRACT(DAY FROM INTERV) END AS INTERV
FROM EMPLOYEES
    LEFT JOIN SICK_LISTS ON SICK_LISTS.EMP_ID = EMPLOYEES.EMP_ID
    LEFT JOIN DESEASES ON DESEASES.DESEASE_ID = SICK_LISTS.DESEASE_ID;

------------------------------------------

DROP TABLE EMP_ALLOWANCES;
DROP TABLE ALLOWANCES;
DROP TABLE SICK_LISTS;
DROP TABLE DESEASES;
DROP TABLE EMPLOYEES;
DROP VIEW LOOSERS;
DROP VIEW RARE_DESEASES;
DROP VIEW EMP_SICK;
